#! /usr/bin/env python
"""
    Copyright (c) <2015> <Kristoffer Sahlin>



    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:



    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.



    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.


"""

from __future__ import print_function
import os
import sys
import copy
import argparse
import signal
from time import time
try:
    from memory_profiler import profile
except ImportError:
    pass

from hitemmodules import hitem_parameters
from hitemmodules import initialize_data
from hitemmodules import misc_functions
from hitemmodules import EM_algorithm
from hitemmodules import align
from hitemmodules.io import write_output
from multiprocessing.dummy import Pool as ThreadPool 
from multiprocessing import Pool
import multiprocessing as mp
from collections import defaultdict


def EM_cluster_reads(params):

    ##### initialize logging info and output #######
    total_start = time()
    logfile = open(os.path.join(params.outfolder, "logfile.txt"), 'w')
    params.filtered_reads = open(os.path.join(params.outfolder, "filtered_reads.fa"), 'w')
    params.logfile = logfile
    for arg, val in params.__dict__.items():
        write_output.logger("{0}:\t\t\t {1}".format(arg, val), params.logfile, timestamp=False)
    print(params.__dict__)
    write_output.logger("Starting.", params.logfile)
    ###################################################



    ########################################################################
    ###### Initialize data structures and values for all parameters ########
    ########################################################################

    x = initialize_data.store_x(open(params.fl_reads, "r"))
    # print("nr x:", len(x))
    y, x_to_y, y_to_x = initialize_data.initialize_y(x)
    write_output.logger("read in {0} sequences and created nodes.".format(len(x)), params.logfile)
    # print(x)
    # print(y_to_x)
    # print(y)
    alignment_results_dict, reads_not_observed_in_alignment = initialize_data.initialize_paf_x_y(params.pacbio_paf, x_to_y, params)
    for acc, exp_support in params.expected_support.items():
        print("inferred support:", exp_support)
    # sys.exit()
    write_output.logger("Created edges", params.logfile)

    write_output.logger("SUPPORT BEFORE SW ALIGNMENT FILTERING",  params.logfile)
    misc_functions.print_graph_complexity(alignment_results_dict, params)

    write_output.isolated_reads(reads_not_observed_in_alignment, x, params) # remove the reads and corresponding y's that did not have any alignments
    alignment_results_dict = misc_functions.remove_data(alignment_results_dict, x, y, x_to_y, y_to_x, params)

    alignment_start = time()

    alignments_to_remap = { y_j: alignment_results_dict[y_j] for y_j in alignment_results_dict }
    align.sw_align_sequences(alignments_to_remap, alignment_results_dict, x, y, params)

    alignment_results_dict = misc_functions.remove_data(alignment_results_dict, x, y, x_to_y, y_to_x, params)

    alignment_elapsed = time() - alignment_start
    write_output.logger('Time elapsed for aligning initial sequences:{0}'.format(str(alignment_elapsed)), params.logfile)

    epsilon_start = time()

    alignment_results_dict_transposed = misc_functions.transpose(alignment_results_dict)
    edit_distance_ij = EM_algorithm.calculate_edit_distance_ij(alignment_results_dict_transposed)
    # TODO: Suffice to send only edit_distance_ij to initialize_epsilon and to calculate_epsilon as well.
    epsilon_backup, errors_x_backup = initialize_data.initialize_epsilon(x, alignment_results_dict_transposed, y_to_x, params)
    epsilon, errors_x = initialize_data.estimate_epsilon(x, alignment_results_dict, alignment_results_dict_transposed, y_to_x, x_to_y, epsilon_backup, errors_x_backup, params)

    epsilon_y = initialize_data.initialize_epsilon_y(epsilon, y, x_to_y, params)
    errors_y = initialize_data.initialize_errors_y(errors_x, y, x_to_y, params)

    epsilon_elapsed = time() - epsilon_start
    write_output.logger('Time elapsed for estimation initial epsilon:{0}'.format(str(epsilon_elapsed)), params.logfile)


    print()
    print("INITIAL ESTIMATE OF ALPHA WEIGHTS")
    print()

    estimating_alpha_start = time()
    alpha_ij = EM_algorithm.calculate_alpha_ij(alignment_results_dict_transposed, epsilon, epsilon_y)
    estimating_alpha_elapsed = time() - estimating_alpha_start
    write_output.logger('Time elapsed for estimating all alpha:{0}'.format(str(estimating_alpha_elapsed)),  params.logfile)
    alpha_transposed_ji = misc_functions.transpose(alpha_ij)
    edit_distance_transposed_ji = misc_functions.transpose(edit_distance_ij)

    write_output.logger("SUPPORT AFTER SW ALIGNMENT FILTERING: DISCREPANCIES IN ENDS OF SEQUENCES > 25BP",  params.logfile)
    misc_functions.print_graph_complexity(alignment_results_dict, params)
    
    #########################################################################    
    ######################################################################### 
    ######################################################################### 


    # Run iterative algorithm
    y_s_not_converged = set(y.keys())
    y_previous = copy.deepcopy(y)
    x_i_where_epsilon_has_not_changed = set()
    x_alignments_to_y_container = {}
    x_to_y_alignments_container = {}
    step = 1
    break_condition = False

    while not break_condition:

        print("STARTING STEP: ",step)
        write_output.logger("", params.logfile)
        write_output.logger('STARTING STEP:{0}'.format(step), params.logfile)
        write_output.logger("".format(step), params.logfile)
        params.step = step

        ############################################################################################
        ###############################  UPDATING Y SEQUENCES  #####################################
        ############################################################################################

        print()
        print("ARRANGING ALIGNMENTS TO PILE UP ON Y")
        print()
        # ARRANGE ALIGNMENTS
        arrange_alignments_start = time()
        params.memory = 0

        ### cleanup for memory ###
        for y_j in y_s_not_converged:
            alignment_results_y_j = alignment_results_dict[y_j]
            if y_j in x_to_y_alignments_container:
                del x_to_y_alignments_container[y_j]

        ####### single core version #########
        if params.single_core:
            for y_j in y_s_not_converged: # new alignment results -- need to be repositioned
                # print("Y: ", y_j, y_to_x[y_j], x[y_to_x[y_j]], y[y_j], y[y_j] )
                alignment_results_y_j = alignment_results_dict[y_j]
                y_j, x_to_y_j_alignments, memory = EM_algorithm.arrange_x_alignments_to_y(y_j, y[y_j], alignment_results_y_j)
                x_to_y_alignments_container[y_j] = x_to_y_j_alignments
                params.memory += memory

        ######################################
        else:
            ####### multiple core version #########
            pool = Pool(processes=mp.cpu_count())
            try:
                res = pool.map_async(EM_algorithm.arrange_x_alignments_to_y_helper, [(y_j, y[y_j], alignment_results_dict[y_j]) for y_j in y_s_not_converged])
                # x_to_y_j_alignments_results = pool.map(EM_algorithm.arrange_x_alignments_to_y_helper, [(y_j, y[y_j], alignment_results_dict[y_j]) for y_j in y_s_not_converged] )
                x_to_y_j_alignments_results =res.get(999999999) # Without the timeout this blocking call ignores all signals.
            except KeyboardInterrupt:
                print("Caught KeyboardInterrupt, terminating workers")
                pool.terminate()
                sys.exit()
            else:
                print("Normal termination")
                pool.close()
            pool.join()
            
            for y_j, x_to_y_j_alignments, memory in x_to_y_j_alignments_results:
                x_to_y_alignments_container[y_j] = x_to_y_j_alignments
                params.memory += memory


            #######################################
        arrange_alignments_elapsed = time() - arrange_alignments_start
        write_output.logger('Total memory consumption in bytes for arranging alignmments:{0}'.format(params.memory),  params.logfile)
        write_output.logger('Time elapsed for arranging alignmments:{0}'.format(str(arrange_alignments_elapsed)),  params.logfile)


        print()
        print("UPDATING Y SEQUENCES")
        print()

        correcting_bps_start = time()

        y_j_to_correct = list(y_s_not_converged)

        # y_j_to_correct = []
        # for j, y_j in enumerate(alpha_transposed_ji):
        #     correcting_y_j = True
        #     if y_j not in y_s_not_converged:
        #         # y_j has not changed the last two iterations
        #         # y must not have changed between the last two iterations in order to consider skipping updating it                    
        #         correcting_y_j = False
        #         for x_i in x_to_y_alignments_container[y_j]:
        #             # at least one epsilon needs to have changed in order for us to reestimate y.
        #             # otherwise everything is identical to previous iteration. 
        #             if x_i not in x_i_where_epsilon_has_not_changed:
        #                 # changing back to correcting y
        #                 correcting_y_j = True
        #     if correcting_y_j:
        #         y_j_to_correct.append(y_j)

        write_output.logger("Correcting {0} y's instead of full size of {1} y's".format(len(y_j_to_correct), len(alpha_transposed_ji)),  params.logfile)

        if params.single_core:
            for j, y_j in enumerate(y_j_to_correct):
                y_j_seq = y[y_j]
                y_j, y_j_seq_new = EM_algorithm.update_y_j(j, y_j, y_to_x[y_j], y_j_seq, x_to_y_alignments_container[y_j], alpha_transposed_ji[y_j], epsilon, params.min_p, errors_y[y_j], params.step)
                y[y_j] = y_j_seq_new

        else:
            ###########parallelize ######################
            # parallelize this in batches of y's.. instead, determine if function is IO-bound or CPU-bound first.
            pool = Pool(processes=mp.cpu_count())
            min_p = params.min_p
            try:
                res = pool.map_async(EM_algorithm.update_y_j_helper, [(j, y_j, y_to_x[y_j], y[y_j], x_to_y_alignments_container[y_j], alpha_transposed_ji[y_j], epsilon, min_p, errors_y[y_j], params.step) for j, y_j in enumerate(y_j_to_correct)] )
                update_y_j_results =res.get(999999999) # Without the timeout this blocking call ignores all signals.
            except KeyboardInterrupt:
                print("Caught KeyboardInterrupt, terminating workers")
                pool.terminate()
                sys.exit()
            else:
                print("Normal termination")
                pool.close()
            pool.join()
            for y_j, y_j_seq_new in update_y_j_results:
                y[y_j] = y_j_seq_new
            # y = dict(update_y_j_results) 
            ##############################################
        correcting_bps_elapsed = time() - correcting_bps_start
        write_output.logger('Time elapsed for correcting basepairs:{0}'.format(str(correcting_bps_elapsed)),  params.logfile)


        ############################################################################################
        ############################################################################################
        ############################################################################################


        step += 1

        ############################################################################################
        ##############################  UPDATING ALIGNMENTS  #######################################
        ############################################################################################

        print()
        print("UPDATING alignments between x and y")
        print()

        alignments_to_remap = { y_j: alignment_results_dict[y_j] for y_j in y_s_not_converged }
        realigning_start = time()
        align.sw_align_sequences(alignments_to_remap, alignment_results_dict, x, y, params)

        realigning_elapsed = time() - realigning_start
        write_output.logger("Time elapsed for realigning non converged y's:{0}".format(str(realigning_elapsed)),  params.logfile)
        alignment_results_dict = misc_functions.remove_data(alignment_results_dict, x, y, x_to_y, y_to_x, params)

        ############################################################################################
        ############################################################################################
        ############################################################################################




        ############################################################################################
        ##########################  UPDATING EPSILON AND WEIGHTS  ##################################
        ############################################################################################

        epsilon_previous = copy.deepcopy(epsilon)

        print()
        print("UPDATING EPSILON Y")
        print()

        # edit_distance_ji = misc_functions.transpose(edit_distance_ij)
        # alpha_ji = misc_functions.transpose(alpha_ij)
        # epsilon_y = EM_algorithm.update_epsilon_y(alpha_ji, edit_distance_ji, epsilon, epsilon_y, params)
        # epsilon_y, errors_y, y_without_alignment_to_x = EM_algorithm.update_epsilon_y_min_distance_to_x_i_original(y, x, epsilon, errors_x, y_to_x, params)
        estimating_epsilon_y_start = time()
        alignment_results_dict_transposed = misc_functions.transpose(alignment_results_dict)
        epsilon_y, errors_y = EM_algorithm.update_epsilon_y_y_to_y_alignments(alignment_results_dict, alignment_results_dict_transposed, y, x_to_y, y_to_x, epsilon_y, errors_y, params)
        estimating_epsilon_y = time() - estimating_epsilon_y_start
        write_output.logger('Time elapsed for estimating number of errors in y :{0}'.format(str(estimating_epsilon_y)),  params.logfile)

        # alignment_results_dict = remove_diverged_starting_points_y(alignment_results_dict, y_without_alignment_to_x, x, y, x_to_y, y_to_x, params)
        print("EPSILON_Y:")
        for y_j in epsilon_y:
            print("y", y_j, epsilon_y[y_j], errors_y[y_j], y_to_x[y_j])

        edit_distance_ij = EM_algorithm.calculate_edit_distance_ij(alignment_results_dict_transposed)


        print()
        print("UPDATING EPSILON X")
        print()

        # epsilon = EM_algorithm.update_epsilon(alpha_ij, edit_distance_ij, epsilon_y, epsilon, params)
        epsilon, errors_x = EM_algorithm.update_epsilon_min_distance_to_y(x, y, edit_distance_ij, epsilon_y, errors_y, params)
        print("EPSILON_X:")
        for x_i in epsilon:
            print(epsilon[x_i], errors_x[x_i], x_i)
        x_i_where_epsilon_has_not_changed = set()
        for x_i in epsilon:
            if epsilon[x_i] == epsilon_previous[x_i]:
                x_i_where_epsilon_has_not_changed.add(x_i)

        # epsilon, errors_x = initialize_data.estimate_epsilon(x, alignment_results_dict, alignment_results_dict_transposed, y_to_x, x_to_y, params)
        # print("EPSILON_X2:")
        # for x_i in epsilon:
        #     print(epsilon[x_i], errors_x[x_i], x_i)
        # x_i_where_epsilon_has_not_changed = set()
        # for x_i in epsilon:
        #     if epsilon[x_i] == epsilon_previous[x_i]:
        #         x_i_where_epsilon_has_not_changed.add(x_i)


        print()
        print("ESTIMATING ALPHA WEIGHTS")
        print()

        estimating_alpha_start = time()



        alpha_ij = EM_algorithm.calculate_alpha_ij(alignment_results_dict_transposed, epsilon, epsilon_y)

        estimating_alpha_elapsed = time() - estimating_alpha_start
        write_output.logger('Time elapsed for estimating all alpha:{0}'.format(str(estimating_alpha_elapsed)),  params.logfile)
     
        alpha_transposed_ji = misc_functions.transpose(alpha_ij)
        edit_distance_transposed_ji = misc_functions.transpose(edit_distance_ij)


        ############################################################################################
        ############################################################################################
        ############################################################################################

        # this part shoud not be here, it should come after the part below, if necessary at all..
        # for y_j in list(y_s_not_converged):
        #     if y_j not in y:
        #         y_s_not_converged.remove(y_j)
        #         write_output.logger("Removing {0} from y_s_not_converged because it is no longer in y".format(y_j),  params.logfile)


        write_output.post_process(y, y_to_x, epsilon_y, errors_y, params)

        ####################### CHECK CONVERGENCE #################################
        ###########################################################################
        ###########################################################################

        y_s_not_converged = set()
        for y_j_acc in y_previous:
            
            # y_j_acc might not be in y and errors anymore if it was cleaned out!
            if y_j_acc not in y:
                print(y_j_acc, "is in y_previous but not longer in y")
                continue

            elif y_previous[y_j_acc] != y[y_j_acc]:
                if errors_y[y_j_acc] != 0:
                    y_s_not_converged.add(y_j_acc)
                
        if not y_s_not_converged:
            print("CONVERGED")
            write_output.logger("All y's have converged. ", params.logfile)
            break_condition = True
        elif step == params.max_passes:
            print("TEMRINATION. max_passes REACHED.")
            write_output.logger("Reached max_passes, terminating.",  params.logfile)
            break_condition = True
        else:
            print("{0} has not yet converged. ".format(len(y_s_not_converged)))
            write_output.logger("{0} y's has not yet converged. ".format(len(y_s_not_converged)),  params.logfile)

        y_previous = copy.deepcopy(y)

        # Algorithm restart
        ###########################################################################
        ###########################################################################
        ###########################################################################


    write_output.post_process(y, y_to_x, epsilon_y, errors_y, params, final_output = True)
    write_output.output_significant_clusters(y, x, alignment_results_dict, y_to_x, epsilon, params)
    total_elapsed = time() - total_start
    write_output.logger('TOTAL TIME EELAPSED FOR HITEM:{0}'.format(str(total_elapsed)), params.logfile)



def main_pipline(params):
    """
    For large data sets it is advised to invoke HIT with the provided
    make languake 'snakemake'.

    Pipeline described below:

    All steps are possible entrypoints if necessary input data to the
    given step already has been generated. Running the
    whole pipeline will do the following:
        1 Separate and extract full length and non full length transcript by using
            pbtranscript.py classify algorithm
        2 Run aligner of choice to find similarities between transcripts:
            * with all-vs-all alignments, or querys to targets from: https://github.com/lh3/minimap
        3' Create graph based on the alignments (as in ICE)
        3 Based on a bam file provided in step 2, parse the bam and find nfl and fl ROI (reads)
            that aligns and are similar. At this point it does not
            matter if some of the mappings are false positive hits due to
            different haplotypes, amplicon genes or similar any other case.
            The only purpose of this step is to error correct the FL transcript
            that were "target sequeces" in the mapping step. The errors will be
            corrected only if the target does not agree with any (or at most
            a super small fraction --- i.e. reasonable probability given coverage)
        4 This is the algorithmic part. Given a set of mapped sequences onto the target
            FL sequences (parsed out in step 3), error correct the FL sequences with
            a probabilistic model. Is several possible corrections are possible,
            either chose the most likely (is it possible to derive this?) or
            keep all possible corrections. We can infer (phase) different corrections
            together by using the relative abundances between positions.
        4 Remove redundant transcripts (to be done).
            Redundant reads should align pretty well if they are error corrected
            correctly. Do this either with:
            1 pbtofu pipline
            2 or something I implement



    """

    if not os.path.exists(params.outfolder):
        os.makedirs(params.outfolder)

    # 1
    classify_wrapper(params)

    # 2
    alignment_wrapper(params)

    # # 2
    # lib_est.LibrarySampler(bam_out,param)

    # # 3
    # collect_libstats(params,params.outfolder,param)
    # get_bp_stats.parse_bam(bam_out, param)

    # # 4
    # #get_gap_coordinates.
    # gap_coordinates(params,param)

    # 5-5'
    # sample_file_path = os.path.join(params.outfolder,'sample_se.txt')
    # sample_ess_correction.main(sample_file_path, param)
    # p_value_cluster(params, param)


if __name__ == '__main__':

    # create the top-level parser
    parser = argparse.ArgumentParser("Pipeline for obtaining non-redundant haplotype specific transcript isoforms using PacBio IsoSeq reads. Illumina reads can can also be added to the program to further imporve SNP calling and phasing.")
    #parser.add_argument('--foo', action='store_true', help='help for foo arg.')
    subparsers = parser.add_subparsers(help='help for subcommand')

    # # create the parser for the "pipeline" command
    # pipeline = subparsers.add_parser('pipeline', help='Run the entire pipeline, i.e., \n\n {0}'.format(main_pipline.__doc__))
    # pipeline_required = pipeline.add_argument_group('required arguments')
    # pipeline_required.add_argument('-outfolder', required=True, type=str, help='Outfolder. ')
    # pipeline_required.add_argument('-pacbio_RoI', required=True, type=str, help='Fast<a/q> file pacbio Reads of Insert. ')
    # pipeline.add_argument('--Illumina_r1', type=str, default="", help='Fast<a/q> file with illumina PE/MP reads all the first mates. ')
    # pipeline.add_argument('--Illumina_r2', type=str, default="", help='Fast<a/q> file with illumina PE/MP reads all the second mates. ')
    # pipeline.add_argument('--movies', type=str, default="", help='Path to file containing pacbio bax/bas.h5 movies (on the same format as for ICE (pacbios transcript method)). ')
    # pipeline.add_argument('--develop_mode', dest='develop_mode', action='store_true', help='This will print more information abount workflow and provide plots of similarity network etc. ')
    # pipeline.add_argument('--threads', type=str, default='64', help='Number of threads for bwa mem.')
    # pipeline.add_argument('--similarity', type=float, default='0.8', help='Minimum similarity to create an edge in the transcript graph')
    # pipeline.set_defaults(which='pipeline')

    # classify = subparsers.add_parser('classify', help='Run wrapper for pacbios pbtranscript.py classify algorithm i.e., \n\n {0}'.format(classify_wrapper.__doc__))
    # classify_required = classify.add_argument_group('required arguments')
    # classify_required.add_argument('-outfolder', type=str, required=True, help='Outfolder. ')
    # classify_required.add_argument('-pacbio_RoI', type=str, required=True, help='Fast<a/q> file pacbio Reads of Insert. ')
    # classify.add_argument('--threads', type=str, default='64', help='Number of threads for bwa mem.')
    # classify.set_defaults(which='classify')

    # create the parser for the "align" command
    # align_reads = subparsers.add_parser('align', help='Aligns non full length and full length RoIs to Full length RoIs (and Illumina reads to FL RoIs if provided) and outputs bam files.i.e., \n\n {0}'.format(alignment_wrapper.__doc__))
    # align_required = align_reads.add_argument_group('required arguments')
    # align_required.add_argument('-outfolder', type=str, required=True, help='Outfolder. ')
    # align_required.add_argument('-fl_RoI', type=str, required=True, help='Full length RoIs (classified in the previous step). ')
    # align_required.add_argument('-nfl_RoI', type=str, required=True, help='Non full length RoIs (classified in the previous step). ')
    # align_reads.add_argument('--Illumina_r1', type=str, default="", help='Fast<a/q> file with illumina PE/MP reads all the first mates. ')
    # align_reads.add_argument('--Illumina_r2', type=str, default="", help='Fast<a/q> file with illumina PE/MP reads all the second mates. ')
    # align_reads.add_argument('--threads', type=str, default='64', help='Number of threads for bwa mem.')
    # align_reads.add_argument('--develop_mode', dest='develop_mode', action='store_true', help='This will print more information abount workflow and provide plots of similarity network etc. ')
    # align_reads.set_defaults(which='align')

    # create the parser for the "EM_cluster" command
    EM_cluster = subparsers.add_parser('EM_cluster', help='Create multialignment pileups and similarity graph network for transcripts.')
    parse_alignments_required = EM_cluster.add_argument_group('required arguments')
    parse_alignments_required.add_argument('-fl_reads', type=str, required=True, help='Full length RoIs. ')
    parse_alignments_required.add_argument('-pacbio_paf', type=str, help='Paths to paf file with mapped pac_bio isoseq reads. ')
    parse_alignments_required.add_argument('-outfolder', type=str, required=True, help='Outfolder. ')
    EM_cluster.add_argument('--develop_mode', dest='develop_mode', action='store_true', help='This will print more information abount workflow and provide plots of similarity network etc. ')
    EM_cluster.add_argument('--heuristic_convergence', dest='heuristic_convergence', action='store_true', help='This will improve runtime but _may_ decrease performance in terms of slightly less accurate transcripts.\n heuristic_convergence stops processing transcript y if: y has not changed betewwe two passes AND epsilon_i of all reads x_i that contributes to updating base pair precision of y have not changed (or changed very little, 5% relative difference) ')
    EM_cluster.add_argument('--single_core', dest='single_core', action='store_true', help='Force working on single core. ')
    EM_cluster.add_argument('--paf_similarity', type=float, default='0.25', help='Minimum similarity inferred from paf format (approximate) to create an edge in the transcript graph')
    EM_cluster.add_argument('--sw_similarity', type=float, default='0.8', help='Minimum similarity from Smith Waterman alignment in order for the transcript to give correction feedback')
    EM_cluster.add_argument('--paf_x_limit', type=int, default='10000', help="Maximum number of edges from x to y, i.e., maximum number of y's that a read can pass information to.")
    EM_cluster.add_argument('--paf_y_limit', type=int, default='100', help='Maximum number of edges from y to x, i.e., maximum number of reads to consider for error correction of y.')
    EM_cluster.add_argument('--min_consensus_support', type=int, default='3', help="Minimum number of y's that converged to the same sequence.")
    EM_cluster.add_argument('--max_passes', type=int, default='10', help='Maximum number of EM iterations allowed.')
    EM_cluster.add_argument('--min_p', type=float, default='0.01', help='Minimum probability required to keep base pair prediction in y. If probability that base pair is incorrect is under this threshold, we change the base pair to the moste likely other suggestion (indel or substitution).')
    EM_cluster.add_argument('--version', action='version', version='%(prog)s 1.2')
    EM_cluster.set_defaults(which='EM_cluster')


    args = parser.parse_args()

    # if args.which == 'pipeline' or args.which == 'classify':
    #     try:
    #         open(args.pacbio_RoI)
    #     except IOError as e:
    #         sys.exit("couldn't find pacbio_RoI file: " + args.pacbio_RoI + " check that the path is correct and that the file exists")

    if args.which == 'EM_cluster':
        try:
            open(args.pacbio_paf,"r")
        except IOError as e:
            sys.exit("couldn't find pacbio paf file: " + args.pacbio_paf + " check that the path is correct and that the file exists")

    params = hitem_parameters.Parameters(**args.__dict__)
    params.pacbio_alignments = params.outfolder + "mapped"
    if not os.path.exists(params.outfolder):
        os.makedirs(params.outfolder)
    if params.develop_mode:
        params.plotfolder = os.path.join(params.outfolder, 'plots')

        if not os.path.exists(params.plotfolder):
            os.makedirs(params.plotfolder)

    if args.which == 'pipeline':
        main_pipline(params)
    # elif args.which == 'classify':
    #     classify_wrapper(params)
    # elif args.which == 'align':
    #     alignment_wrapper(params)
    elif args.which == 'EM_cluster':
        EM_cluster_reads(params)
    else:
        print('invalid call')
