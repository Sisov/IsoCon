#! /usr/bin/env python
"""
    Copyright (c) <2015> <Kristoffer Sahlin>



    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:



    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.



    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.


"""

from __future__ import print_function
import os
import sys
import copy
import argparse
import signal
from time import time

from modules import threeco_parameters
from modules.input_output import write_output
from modules import identify_barcodes
import threeco
from multiprocessing import Pool
import multiprocessing as mp

def run_remove_barcodes():
    pass

def run_get_candidates():
    pass

def run_stat_filter():
    pass


def run_pipeline(params):
    """
        runs:
            1. remove_barcodes() if --barcodes is specified
            2. get_candidates() to find candidate transcripts out of CCS full length reads
            3. stat_filter() to filter candidates and only output significant ones
    """

    ##### initialize logging info and output #######
    total_start = time()
    logfile = open(os.path.join(params.outfolder, "logfile.txt"), 'w')
    params.filtered_reads = open(os.path.join(params.outfolder, "filtered_reads.fa"), 'w')
    params.logfile = logfile
    for arg, val in params.__dict__.items():
        write_output.logger("{0}:\t\t\t {1}".format(arg, val), params.logfile, timestamp=False)
    print(params.__dict__)
    write_output.logger("Starting.", params.logfile)
    ###################################################
    params.read_file = params.fl_reads
    if params.barcodes:
        # need to redirect path to reads to the new path with modified reads as well
        filtered_file = identify_barcodes.remove_barcodes_fcn(read_file, params)
        params.read_file = filtered_file

    candidate_file = threeco.find_candidate_transcripts(params.read_file, params)
    threeco.stat_filter_candidates(params.read_file, candidate_file, params)

    total_elapsed = time() - total_start
    write_output.logger('TOTAL TIME ELAPSED FOR 3CO:{0}'.format(str(total_elapsed)), params.logfile)


if __name__ == '__main__':

    # create the top-level parser
    parser = argparse.ArgumentParser("Pipeline for obtaining non-redundant haplotype specific transcript isoforms using PacBio IsoSeq reads.")
    #parser.add_argument('--foo', action='store_true', help='help for foo arg.')
    parser.add_argument('--version', action='version', version='%(prog)s 0.01')

    subparsers = parser.add_subparsers(help='help for subcommand')

    # # create the parser for the "pipeline" command
    pipeline = subparsers.add_parser('pipeline', help='Run the entire pipeline, i.e., \n\n {0}'.format(run_pipeline.__doc__))
    pipeline_required = pipeline.add_argument_group('required arguments')
    pipeline_required.add_argument('-fl_reads', required=True, type=str, help='Fast<a/q> file pacbio Reads of Insert. ')
    pipeline_required.add_argument('-outfolder', required=True, type=str, help='Outfolder. ')
    pipeline.add_argument('--barcodes', type=str, help='If targeted approach. A fasta file with barcodes to search for in ends of transcripts. ')
    pipeline.add_argument('--develop_mode', dest='develop_mode', action='store_true', help='This will print more information abount workflow and provide plots of similarity network etc. ')
    pipeline.add_argument('--single_core', dest='single_core', action='store_true', help='Force working on single core. ')
    pipeline.add_argument('--min_candidate_support', type=int, default=3, help='Required minimum number of reads converged to the same sequence to be included in statistical test.')
    pipeline.add_argument('--statistical_test_editdist', type=int, default=5, help='Create an edge in candidate graph if the two candidates has edit distance lower or equal to this threshold (even if minimizer is smaller).')
    pipeline.set_defaults(which='pipeline')


    # create the parser for the "remove_barcodes" command
    remove_barcodes = subparsers.add_parser('remove_barcodes', help='Remove barcodes from sequences.')
    remove_barcodes.add_argument('-fl_reads', type=str, help='Path to the consensus fasta file')
    remove_barcodes.add_argument('outfolder', type=str, help='Output folder to results')
    remove_barcodes.set_defaults(which='remove_barcodes')

    # create the parser for the "get_candidates" command
    get_candidates = subparsers.add_parser('get_candidates', help='Get candidate transcripts with minimizer approach.')
    get_candidates_required = get_candidates.add_argument_group('required arguments')
    get_candidates_required.add_argument('-fl_reads', type=str, required=True, help='Full length RoIs. ')
    get_candidates_required.add_argument('-outfolder', type=str, required=True, help='Outfolder. ')
    get_candidates.add_argument('--barcodes', type=str, help='If targeted approach. A fasta file with barcodes to search for in ends of transcripts. ')
    get_candidates.add_argument('--min_candidate_support', type=int, default=3, help='Required minimum number of reads converged to the same sequence to be included in statistical test.')
    get_candidates.add_argument('--develop_mode', dest='develop_mode', action='store_true', help='This will print more information abount workflow and provide plots of similarity network etc. ')
    get_candidates.add_argument('--single_core', dest='single_core', action='store_true', help='Force working on single core. ')
    get_candidates.set_defaults(which='get_candidates')

    # create the parser for the "stat_filter" command
    stat_filter = subparsers.add_parser('stat_filter', help='Get candidate transcripts with minimizer approach.')
    stat_filter_required = stat_filter.add_argument_group('required arguments')
    stat_filter_required.add_argument('-fl_reads', type=str, required=True, help='Full length RoIs. ')
    stat_filter_required.add_argument('-candidates', type=str, help='Already generated candidates. ')
    stat_filter_required.add_argument('-outfolder', type=str, required=True, help='Outfolder. ')
    stat_filter.add_argument('--barcodes', type=str, help='If targeted approach. A fasta file with barcodes to search for in ends of transcripts. ')

    # stat_filter.add_argument('--consensus', type=str, help='Additional canditates supplied by user (This still runs the minimizer step, but additional candidates can help with guidance). ')


    args = parser.parse_args()


    try:
        open(args.fl_reads,"r")
    except IOError as e:
        sys.exit("couldn't find read file paf file: " + args.fl_reads + " check that the path is correct and that the file exists")

    params = threeco_parameters.Parameters(**args.__dict__)
    params.minimap_alignments = os.path.join(params.outfolder, "minimapped")
    if not os.path.exists(params.outfolder):
        os.makedirs(params.outfolder)
    if params.develop_mode:
        params.plotfolder = os.path.join(params.outfolder, 'plots')
        if not os.path.exists(params.plotfolder):
            os.makedirs(params.plotfolder)

    if args.which == 'pipeline':
        run_pipeline(params)
    elif args.which == 'remove_barcodes':
        run_remove_barcodes(params)
    elif args.which == 'get_candidates':
        run_get_candidates(params)
    elif args.which == 'stat_filter':
        run_stat_filter(params)
    else:
        print('invalid call')
