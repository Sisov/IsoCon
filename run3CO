#! /usr/bin/env python
"""
    Copyright (c) <2015> <Kristoffer Sahlin>



    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:



    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.



    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.


"""

from __future__ import print_function
import os
import shutil
import sys
import copy
import argparse
import signal
from time import time
import re

from multiprocessing import Pool
import multiprocessing as mp

import threeco
from modules import threeco_parameters
from modules.input_output import write_output, fasta_parser
from modules import partitions
from modules import identify_barcodes

def clean_dir(params):
    keep_files = set(["logfile.txt", "candidates_converged.fa", "final_candidates.fa"])
    for the_file in os.listdir(params.outfolder):
        if the_file in keep_files:
            continue

        file_path = os.path.join(params.outfolder, the_file)
        try:
            if os.path.isfile(file_path):
                os.unlink(file_path)
            elif os.path.isdir(file_path): 
                shutil.rmtree(file_path)
        except Exception as e:
            print(e)

def run_remove_barcodes():
    pass

def run_get_candidates(params):
    total_start = time()
    initialize_logger(params)
    candidate_file = threeco.find_candidate_transcripts(params.fl_reads, params)
    total_elapsed = time() - total_start
    write_output.logger('TOTAL TIME ELAPSED FOR 3CO:{0}'.format(str(total_elapsed)), params.logfile)
    clean_dir(params)

def run_stat_filter(params):
    total_start = time()
    initialize_logger(params)
    all_candidates = {acc: seq for (acc, seq) in  fasta_parser.read_fasta(open(params.candidates, 'r'))}
    # candidate_alignments =  alignment_file_parser.get_alignments(open(params.candidate_alignments, 'r'))

    print("nr initial candidates:", len(all_candidates))
    preprocessed_candidates_file = open(os.path.join(params.outfolder, "preprocessed_candidates.fa"), "w")
    counter = 0
    for acc, seq in all_candidates.items():
        match = re.search('support_(\d+)', acc)
        if match:
            support = int(match.group(1))
            if support < params.min_candidate_support:
                print("filter candidate with support:", support)
                continue
        else:
            print("no support in accession")

        preprocessed_candidates_file.write(">{0}\n{1}\n".format(acc, seq))
        counter += 1

    preprocessed_candidates_file.close()
    params.candidates = preprocessed_candidates_file.name
    print("After preprocessed:", counter)


    original_reads = {acc: seq for (acc, seq) in  fasta_parser.read_fasta(open(params.fl_reads, 'r'))}
    filtered_candidates = {acc: seq for (acc, seq) in  fasta_parser.read_fasta(open(params.candidates, 'r'))}
    G_star, partition_of_X, alignments_of_x_to_c =  partitions.partition_strings_2set(original_reads, filtered_candidates, params.fl_reads, params.candidates)

    threeco.stat_filter_candidates(params.fl_reads, params.candidates, alignments_of_x_to_c, params)
    total_elapsed = time() - total_start
    clean_dir(params)
    write_output.logger('TOTAL TIME ELAPSED FOR STAT_FILTER:{0}'.format(str(total_elapsed)), params.logfile)

def initialize_logger(params):
    ##### initialize logging info and output #######
    logfile = open(os.path.join(params.outfolder, "logfile.txt"), 'w')
    params.filtered_reads = open(os.path.join(params.outfolder, "filtered_reads.fa"), 'w')
    params.logfile = logfile
    for arg, val in params.__dict__.items():
        write_output.logger("{0}:\t\t\t {1}".format(arg, val), params.logfile, timestamp=False)
    print(params.__dict__)
    write_output.logger("Starting.", params.logfile)
    ###################################################


def run_pipeline(params):
    """
        runs:
            1. remove_barcodes() if --barcodes is specified
            2. get_candidates() to find candidate transcripts out of CCS full length reads
            3. stat_filter() to filter candidates and only output significant ones
    """
    total_start = time()
    initialize_logger(params)
    params.read_file = params.fl_reads
    if params.barcodes:
        # need to redirect path to reads to the new path with modified reads as well
        filtered_file = identify_barcodes.remove_barcodes_fcn(read_file, params)
        params.read_file = filtered_file

    minimizer_start = time() 
    candidate_file, alignments_of_reads_to_candidates = threeco.find_candidate_transcripts(params.read_file, params)
    minimizer_elapsed = time() - minimizer_start
    write_output.logger('TIME ELAPSED FOR FINDING CANDIDATES WITH MINIMIZERS:{0}'.format(str(minimizer_elapsed)), params.logfile)

    stats_start = time()
    threeco.stat_filter_candidates(params.read_file, candidate_file, alignments_of_reads_to_candidates, params)
    stats_elapsed = time() - stats_start
    write_output.logger('TIME ELAPSED FOR STATISTICAL TEST OF CANDIDATES:{0}'.format(str(stats_elapsed)), params.logfile)

    clean_dir(params)
    total_elapsed = time() - total_start
    write_output.logger('TOTAL TIME ELAPSED FOR 3CO:{0}'.format(str(total_elapsed)), params.logfile)


if __name__ == '__main__':

    # create the top-level parser
    parent_parser = argparse.ArgumentParser("Pipeline for obtaining non-redundant haplotype specific transcript isoforms using PacBio IsoSeq reads.")
    # parent_parser.add_argument('--cleanup', action='store_true', help='Remove everything except logfile.txt, candidates_converged.fa and final_candidates.fa in output folder.')
    parent_parser.add_argument('--version', action='version', version='%(prog)s 0.0.2')

    subparsers = parent_parser.add_subparsers(help='help for subcommand')

    # # create the parser for the "pipeline" command
    pipeline = subparsers.add_parser('pipeline', help='Run the entire pipeline, i.e., \n\n {0}'.format(run_pipeline.__doc__))
    pipeline_required = pipeline.add_argument_group('required arguments')
    pipeline_required.add_argument('-fl_reads', required=True, type=str, help='Fast<a/q> file pacbio Reads of Insert. ')
    pipeline_required.add_argument('-outfolder', required=True, type=str, help='Outfolder. ')
    pipeline.add_argument('--barcodes', type=str, help='If targeted approach. A fasta file with barcodes to search for in ends of transcripts. ')
    pipeline.add_argument('--develop_mode', dest='develop_mode', action='store_true', help='This will print more information abount workflow and provide plots of similarity network etc. ')
    pipeline.add_argument('--single_core', dest='single_core', action='store_true', help='Force working on single core. ')
    pipeline.add_argument('--min_candidate_support', type=int, default=3, help='Required minimum number of reads converged to the same sequence to be included in statistical test.')
    pipeline.add_argument('--statistical_test_editdist', type=int, default=0, help='Create an edge in candidate graph if the two candidates has edit distance lower or equal to this threshold (even if minimizer is smaller).')
    pipeline.add_argument('--cleanup', action='store_true', help='Remove everything except logfile.txt, candidates_converged.fa and final_candidates.fa in output folder.')
    pipeline.set_defaults(which='pipeline')


    # create the parser for the "remove_barcodes" command
    remove_barcodes = subparsers.add_parser('remove_barcodes', help='Remove barcodes from sequences.')
    remove_barcodes.add_argument('-fl_reads', type=str, help='Path to the consensus fasta file')
    remove_barcodes.add_argument('outfolder', type=str, help='Output folder to results')
    remove_barcodes.add_argument('--cleanup', action='store_true', help='Remove everything except logfile.txt, candidates_converged.fa and final_candidates.fa in output folder.')
    remove_barcodes.set_defaults(which='remove_barcodes')

    # create the parser for the "get_candidates" command
    get_candidates = subparsers.add_parser('get_candidates', help='Get candidate transcripts with minimizer approach.')
    get_candidates_required = get_candidates.add_argument_group('required arguments')
    get_candidates_required.add_argument('-fl_reads', type=str, required=True, help='Full length RoIs. ')
    get_candidates_required.add_argument('-outfolder', type=str, required=True, help='Outfolder. ')
    get_candidates.add_argument('--barcodes', type=str, help='If targeted approach. A fasta file with barcodes to search for in ends of transcripts. ')
    get_candidates.add_argument('--min_candidate_support', type=int, default=3, help='Required minimum number of reads converged to the same sequence to be included in statistical test.')
    get_candidates.add_argument('--develop_mode', dest='develop_mode', action='store_true', help='This will print more information abount workflow and provide plots of similarity network etc. ')
    get_candidates.add_argument('--single_core', dest='single_core', action='store_true', help='Force working on single core. ')
    get_candidates.add_argument('--cleanup', action='store_true', help='Remove everything except logfile.txt, candidates_converged.fa and final_candidates.fa in output folder.')
    get_candidates.set_defaults(which='get_candidates')


    # create the parser for the "stat_filter" command
    stat_filter = subparsers.add_parser('stat_filter', help='Get candidate transcripts with minimizer approach.')
    stat_filter_required = stat_filter.add_argument_group('required arguments')
    stat_filter_required.add_argument('-fl_reads', type=str, required=True, help='Full length RoIs. ')
    stat_filter_required.add_argument('-candidates', type=str, help='Already generated candidates. ')
    # stat_filter_required.add_argument('-candidate_alignments', type=str, help='Already generated read to candidate alignments. ')
    stat_filter_required.add_argument('-outfolder', type=str, required=True, help='Outfolder. ')
    stat_filter.add_argument('--develop_mode', dest='develop_mode', action='store_true', help='This will print more information abount workflow and provide plots of similarity network etc. ')
    stat_filter.add_argument('--min_candidate_support', type=int, default=3, help='Required minimum number of reads converged to the same sequence to be included in statistical test. Can only be applies if fasta accessions comes from previous step in pipline')
    stat_filter.add_argument('--single_core', dest='single_core', action='store_true', help='Force working on single core. ')
    stat_filter.add_argument('--statistical_test_editdist', type=int, default=0, help='Create an edge in candidate graph if the two candidates has edit distance lower or equal to this threshold (even if minimizer is smaller).')
    stat_filter.add_argument('--barcodes', type=str, help='If targeted approach. A fasta file with barcodes to search for in ends of transcripts. ')
    stat_filter.add_argument('--cleanup', action='store_true', help='Remove everything except logfile.txt, candidates_converged.fa and final_candidates.fa in output folder.')
    stat_filter.set_defaults(which='stat_filter')

    # stat_filter.add_argument('--consensus', type=str, help='Additional canditates supplied by user (This still runs the minimizer step, but additional candidates can help with guidance). ')


    args = parent_parser.parse_args()


    try:
        open(args.fl_reads,"r")
    except IOError as e:
        sys.exit("couldn't find read file paf file: " + args.fl_reads + " check that the path is correct and that the file exists")

    params = threeco_parameters.Parameters(**args.__dict__)
    params.minimap_alignments = os.path.join(params.outfolder, "minimapped")
    if not os.path.exists(params.outfolder):
        os.makedirs(params.outfolder)
    if params.develop_mode:
        params.plotfolder = os.path.join(params.outfolder, 'plots')
        if not os.path.exists(params.plotfolder):
            os.makedirs(params.plotfolder)
    params.tempfolder = os.path.join(params.outfolder, 'alignments')
    if not os.path.exists(params.tempfolder):
        os.makedirs(params.tempfolder)


    if args.which == 'pipeline':
        run_pipeline(params)
    elif args.which == 'remove_barcodes':
        run_remove_barcodes(params)
    elif args.which == 'get_candidates':
        run_get_candidates(params)
    elif args.which == 'stat_filter':
        run_stat_filter(params)
    else:
        print('invalid call')
